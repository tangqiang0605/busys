import { Injectable } from '@nestjs/common';
import { PrismaService } from 'src/common/prisma/prisma.service';
import { Prisma } from '@prisma/client';
import { buildPageQuery } from 'src/common/utils';

@Injectable()
export class <%= resourceNameUpper %>Service {
  constructor(private readonly prisma: PrismaService) {}

  create(create<%= resourceNameUpper %>Dto: Prisma.<%= resourceNameUpper %>CreateInput) {
    return this.prisma.<%= resourceName %>.create({ data: create<%= resourceNameUpper %>Dto });
  }

  async findAll(params: any) {
    const { skip, take, where, pageNum } = buildPageQuery(params, [
      '<%= resourceName %>_id',
    ]);
    const data = await this.prisma.<%= resourceName %>.findMany({
      skip,
      take,
      where,
    });
    const total = await this.prisma.<%= resourceName %>.count({ where });

    return { data, total, pageNum, pageSize: take };
  }

  findOne(id: number) {
    return this.prisma.<%= resourceName %>.findUnique({ where: { <%= resourceName %>_id: id } });
  }

  update(id: number, update<%= resourceNameUpper %>Dto: Prisma.<%= resourceNameUpper %>UpdateInput) {
    return this.prisma.<%= resourceName %>.update({
      where: { <%= resourceName %>_id: id },
      data: update<%= resourceNameUpper %>Dto,
    });
  }

  remove(id: number) {
    return this.prisma.<%= resourceName %>.delete({ where: { <%= resourceName %>_id: id } });
  }
}
